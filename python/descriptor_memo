property (fget=None, fset=None, fdel=None, doc=None)

class Person:
    def __init__(self, name):
        self._name=name
    def getName(self):
        print("Getting the Name")
        return self._name
    def setName(self, name):
        print("Setting the Name to :" + name)
        self._name=name
    def delName(self):
        print("Deleting the Name")
        del self._name

    name = property(getName, setName, delName)

name = Person("John")
print(name.name)

name.name="Price"
del name.name


# using class methods

class descriptors:
    def __init__(self, x=""):
        self.x=x
    def __get__(self, obj, objtype):
        return "{}for{}".format(self.x,self.x)
    def __set__(self, obj, x):
        if isinstance(x, str):
            self.x=x
        else:
            raise TypeError("x should always be a string")

class A(object):
    x = descriptors()

@property -> Getting
@x.setter -> Setting
@x.deleter -> Deleting

class Person:
    def __init__(self,name):
        self._name=name

    @property
    def name(self):
        print("Getting the Name")
        return self._name

    @name.setting
    def name(self,name):
        print("Setting the name to : "+ name)
        self._name=name

    @name.deleter
    def name(self):
        print("Deleting the name")
        del self._name

x = Person("John")
print(x.name)
x.name="Price"
del x.name

Why descriptors?
Lazy Properties
https://velog.io/@kho5420/Python-Lazy-Evaluation-%EC%9D%B4%EB%9E%80
https://www.youtube.com/watch?v=6Dy3dZE1LK4
https://realpython.com/python-descriptors/
import random
import time

class Lazy:
    def __init__(self, function):
        self.function=function
        self.name=function.__name__
    def __get__(self,obj,type=None) -> object:
        obj.__dict__[self.name]=self.function(obj)
        return obj.__dict__[self.name]

class Waiting:
    @Lazy
    def wait(self):
        time.sleep(3)
        return 42


x=Waiting()
#print(x.wait())
#print(x.wait())
#print(x.wait())
print(x.wait)
print(x.wait)
print(x.wait)
y=A()
y.x="John"
#y.x=12
print(y.x)

class EvenNumber:
    def __set_name__(self,owner,name):
        self.name=name
    def __get__(self,obj,type=None)->object:
        return obj.__dict__.get(self.name) # or 0
    def __set__(self, obj, value)->None:
        obj.__dict__[self.name] = (value if value % 2 == 0 else 0)

class Values:
    def __init__(self):
        self._values1 = EvenNumber()
        self._values2 = EvenNumber()
        self._values3 = EvenNumber()
        self._values4 = EvenNumber()
        self._values5 = EvenNumber()
'''
        self._values1 = 0
        self._values2 = 0
        self._values3 = 0
        self._values4 = 0
        self._values5 = 0

    @property
    def values1(self):
        return self._value1
    @value1.setter
    def value1(self, value):
        self._value1 = value if value % 2 == 0 else 0

    @property
    def value2(self):
        return self._value2
    @value2.setter
    def value2(self, value):
        self._value2 = value if value % 2 == 0 else 0

    @property
    def value3(self):
        return self._value3
    @value3.setter
    def value3(self, value):
        self._value3 = value if value % 2 == 0 else 0

    @property
    def value4(self):
        return self._value4
    @value4.setter
    def value4(self, value):
        self._value4 = value if value % 2 == 0 else 0

    @property
    def value5(self):
        return self._value5
    @value5.setter
    def value5(self, value):
        self._value5 = value if value % 2 == 0 else 0
'''

my_values = Values()
my_values.value1 = 1
my_values.value2 = 4
print(my_values.value1)
print(my_values.value2)



The __set_name__ is called after the class has been defined (so that the class can be passed as the owner argument), not immediately after the assignment is made. So to correct the code we need call the EvenNumber class this way:

class Values:
    value1 = EvenNumber()
    value2 = EvenNumber()
Other way to set the EvenNumber and do the exact same thing is:

class EvenNumber:
    def __set_name__(self, owner, name):
        self.public_name = name
        self.private_name = "__" + name
 
    def __get__(self, obj, type=None) -> object:
        value = getattr(obj, self.private_name)
        return value
        # return obj.__dict__.get(self.public_name) #old way
 
    def __set__(self, obj, value) -> None:
        setattr(obj, self.private_name, (value if value%2 == 0 else 0))
        # obj.__dict__[self.public_name] = (value if value%2 == 0 else 0) # old way
